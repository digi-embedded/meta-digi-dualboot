#
# U-Boot bootscript for EMMC/SD images created by Yocto.
#

# Back up environment variables
setenv ORIG_overlays ${overlays}
setenv ORIG_extra_bootargs ${extra_bootargs}

# Set SOC type to "imx8qxp" if not already defined by U-Boot
if test ! -n "${soc_type}"; then
	setenv soc_type "imx8qxp"
fi

# Reset overlays when using dualboot mode, because we need to 
# save the environment in case of an installation fall back. 
if test "${dual_boot}" = "yes"; then
	if test -n "${overlays}"; then
		setenv overlays
	fi
fi

#
# Determine overlays to apply depending on the hardware capabilities
# described by the HWID, SOM version, and carrier board version.
#
if test -n "${module_ram}"; then
	setexpr module_has_wifi ${hwid_3} \& 1
	setexpr module_has_bt ${hwid_3} \& 2
	setexpr module_has_bt ${module_has_bt} / 2

	if test "${module_has_bt}" = "1" && test -z "${disable_bt}"; then
		setenv overlays _ov_som_bt_ccimx8x.dtbo,${overlays}
	fi

	if test "${module_has_wifi}" = "1" && test -z "${disable_wifi}"; then
		setenv overlays _ov_som_wifi_ccimx8x.dtbo,${overlays}
	fi
else
	#
	# Set overlays depending on the hardware variant
	#
	if test "${module_variant}" = "0x01"; then
		setenv overlays _ov_som_bt_ccimx8x.dtbo,_ov_som_wifi_ccimx8x.dtbo,${overlays}
	elif test "${module_variant}" = "0x02"; then
		setenv overlays _ov_som_bt_ccimx8x.dtbo,_ov_som_wifi_ccimx8x.dtbo,${overlays}
	elif test "${module_variant}" = "0x04"; then
		setenv overlays _ov_som_bt_ccimx8x.dtbo,_ov_som_wifi_ccimx8x.dtbo,${overlays}
	fi
fi

# Apply QXP overlay if the SOC type is "imx8qxp"
if test "${soc_type}" = "imx8qxp"; then
	setenv overlays _ov_som_quad_ccimx8x.dtbo,${overlays}
fi

# Apply SBCv3 overlay if the board_version is 3 or lesser
if test "${board_version}" -le "3"; then
	setenv overlays _ov_board_v1-v3_ccimx8x-sbc-pro.dtbo,${overlays}
fi

# Dual boot update verification
if test "${dualboot}" = "yes"; then
	if test "${upgrade_available}" = "1"; then
		echo "Update detected; Booting new system (try ${bootcount})"
		if test "${bootcount}" = "${bootlimit}"; then
			echo "## Update failed; Rolling back to previous version."
			if test "${active_system}" = "linux_a"; then
				part number mmc ${mmcbootdev} linux_b pi
				setenv mmcpart ${pi}
				# Save the partition index on variable rootfs_b_index
				part number mmc ${mmcbootdev} rootfs_b rootfs_b_index
				# Save the rootfs_b UUID into mmcroot_b
				part uuid mmc ${mmcbootdev}:${rootfs_b_index} mmcroot_b
				setenv mmcroot PARTUUID=${mmcroot_b}
				setenv active_system linux_b
			else
				part number mmc ${mmcbootdev} linux_a pi
				setenv mmcpart ${pi}
				# Save the partition index on variable rootfs_a_index
				part number mmc ${mmcbootdev} rootfs_a rootfs_a_index
				# Save the rootfs_a UUID into mmcroot_a
				part uuid mmc ${mmcbootdev}:${rootfs_a_index} mmcroot_a
				setenv mmcroot PARTUUID=${mmcroot_a}
				setenv active_system linux_a
			fi
			setenv upgrade_available
			saveenv
		fi
	fi
else
	# Get the UUID of the configured boot partition.
	part uuid mmc ${mmcbootdev}:${mmcpart} bootpart
	# Check the boot source.
	if test "${bootpart}" = "${part1_uuid}"; then
		# We are booting from the eMMC using 'linux'.
		true
	elif test "${bootpart}" = "${part2_uuid}"; then
		# We are booting from the eMMC using 'recovery'.
		setenv boot_initrd true
		setenv initrd_file uramdisk-recovery.img
	else
		# We are booting from the SD card.
		setenv mmcroot /dev/mmcblk${mmcbootdev}p2
	fi
fi
setenv extra_bootargs fbcon=logo-pos:center ${extra_bootargs}
dboot linux mmc ${mmcbootdev}:${mmcpart}



# We only get here in case of an error on the dboot command.

# Undo changes to environment variables
setenv overlays ${ORIG_overlays}
setenv ORIG_overlays
setenv extra_bootargs ${ORIG_extra_bootargs}
setenv ORIG_extra_bootargs
