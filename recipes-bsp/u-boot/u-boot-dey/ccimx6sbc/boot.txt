#
# U-Boot bootscript for EMMC/SD images created by Yocto.
#

# Back up environment variables
setenv ORIG_extra_bootargs ${extra_bootargs}

#
# Set device tree filename depending on the board ID (if defined)
#
if test -n "${board_id}"; then
	setenv fdt_file ${soc_family}-ccimx6sbc-id${board_id}.dtb
else
	#
	# Set device tree filename depending on the hardware variant
	#
	if test "${module_variant}" = "0x02"; then
		setenv fdt_file imx6q-ccimx6sbc-wb.dtb
	elif test "${module_variant}" = "0x03"; then
		setenv fdt_file imx6q-ccimx6sbc-wb.dtb
	elif test "${module_variant}" = "0x04"; then
		setenv fdt_file imx6q-ccimx6sbc-wb.dtb
	elif test "${module_variant}" = "0x05"; then
		setenv fdt_file imx6q-ccimx6sbc-w.dtb
	elif test "${module_variant}" = "0x06"; then
		setenv fdt_file imx6q-ccimx6sbc-wb.dtb
	elif test "${module_variant}" = "0x08"; then
		setenv fdt_file imx6q-ccimx6sbc.dtb
	elif test "${module_variant}" = "0x0a"; then
		setenv fdt_file imx6dl-ccimx6sbc-w.dtb
	elif test "${module_variant}" = "0x0b"; then
		setenv fdt_file imx6dl-ccimx6sbc-wb.dtb
	elif test "${module_variant}" = "0x0c"; then
		setenv fdt_file imx6dl-ccimx6sbc.dtb
	elif test "${module_variant}" = "0x0e"; then
		setenv fdt_file imx6q-ccimx6sbc.dtb
	elif test "${module_variant}" = "0x0f"; then
		setenv fdt_file imx6q-ccimx6sbc.dtb
	elif test "${module_variant}" = "0x11"; then
		setenv fdt_file imx6q-ccimx6sbc-wb.dtb
	elif test "${module_variant}" = "0x12"; then
		setenv fdt_file imx6q-ccimx6sbc-wb.dtb
	elif test "${module_variant}" = "0x13"; then
		setenv fdt_file imx6dl-ccimx6sbc-wb.dtb
	elif test "${module_variant}" = "0x14"; then
		setenv fdt_file imx6q-ccimx6sbc.dtb
	elif test "${module_variant}" = "0x15"; then
		setenv fdt_file imx6dl-ccimx6sbc.dtb
	else
		setenv fdt_file imx6q-ccimx6sbc-wb.dtb
	fi
fi

# Dual boot update verification
if test "${dual_boot}" = "yes"; then
	if test "${upgrade_available}" = "1"; then
		echo "Update detected; Booting new system (try ${bootcount})"
		if test "${bootcount}" = "${bootlimit}"; then
			echo "## Update failed; Rolling back to previous version."
			if test "${active_system}" = "linux_a"; then
				part number mmc {mmcbootdev} linux_b pi
				setenv mmcpart ${pi}
				# Save the partition index on variable rootfs_b_index
				part number mmc ${mmcbootdev} rootfs_b rootfs_b_index
				# Save the rootfs_b UUID into mmcroot_b
				part uuid mmc ${mmcbootdev}:${rootfs_b_index} mmcroot_b
				setenv mmcroot PARTUUID=${mmcroot_b}
				setenv active_system linux_b
			else
				part number mmc {mmcbootdev} linux_a pi
				setenv mmcpart ${pi}
				# Save the partition index on variable rootfs_a_index
				part number mmc ${mmcbootdev} rootfs_a rootfs_a_index
				# Save the rootfs_a UUID into mmcroot_a
				part uuid mmc ${mmcbootdev}:${rootfs_a_index} mmcroot_a
				setenv mmcroot PARTUUID=${mmcroot_a}
				setenv active_system linux_a
			fi
			setenv upgrade_available
			saveenv
		fi
	fi
else
	# Get the UUID of the configured boot partition.
	part uuid mmc ${mmcbootdev}:${mmcpart} bootpart
	# Check the boot source.
	if test "${bootpart}" = "${part1_uuid}"; then
		# We are booting from the eMMC using 'linux'.
		true
	elif test "${bootpart}" = "${part2_uuid}"; then
		# We are booting from the eMMC using 'recovery'.
		setenv boot_initrd true
		setenv initrd_file uramdisk-recovery.img
	else
		# We are booting from the SD card.
		setenv mmcroot /dev/mmcblk${mmcbootdev}p2
	fi
fi
setenv extra_bootargs fbcon=logo-pos:center ${extra_bootargs}
dboot linux mmc ${mmcbootdev}:${mmcpart}



# We only get here in case of an error on the dboot command.

# Undo changes to environment variables
setenv extra_bootargs ${ORIG_extra_bootargs}
setenv ORIG_extra_bootargs
